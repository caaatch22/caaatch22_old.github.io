<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>cs144-note1</title>
    <link href="/cs144-note1/"/>
    <url>/cs144-note1/</url>
    
    <content type="html"><![CDATA[<h1 id="computer-network"><a class="markdownIt-Anchor" href="#computer-network"></a> Computer Network</h1><h2 id="introduction"><a class="markdownIt-Anchor" href="#introduction"></a> introduction</h2><p>dominant model : bidirectional, reliable byte stream connection</p><ul><li><p><strong>http</strong>: hypertext transfer protocol : designed to be a document centric way for programs to communicate.<br />Client  —&gt;  Server  model</p></li><li><p><strong>Bit-Torrent</strong>: (peer-to-peer model) a client requests document from other clients, a single client can request from many others.<br />these collections of collaborating clients are called <strong>swarms</strong><br />when a client wants to downloads a file, it first find <code>torrent</code>, usually using www and download using http.<br /><strong>torrent</strong> file describes information about data file, also tells bit-torrent about the <strong>tracker</strong> (a node keeps track names of clients of the swarm)</p></li><li><p><strong>skype</strong>: client &lt;–NAT–&gt;client   two clients request data from each other</p><p><em>NAT</em> : network address translator<br />if you’re <em>behind a NAT</em>, you can open connections out to the internet, but other nodes on the internet can’t easily open connections to you.</p></li></ul><h2 id="the-4-layer-internet-model"><a class="markdownIt-Anchor" href="#the-4-layer-internet-model"></a> The 4 layer Internet Model</h2><h3 id="network-layer-and-link-layer"><a class="markdownIt-Anchor" href="#network-layer-and-link-layer"></a> Network layer and link layer</h3><img src = "../img/cs144/4LayerModel.png" align="left" width="300px" height="430"/><span style="float:left"></span> The Internet is made up of `event hosts`, `links` and `routers`. <p>data is delivered in <strong>packets</strong><br />a packet is a self-contained unit consisting of the data we want to be delivered.</p><p>link layer’s job is  to carry the data over one link  at a time.<br /><code>ethernet</code> and <code>wifi</code> --&gt; two examples of different links layers</p><p>Network layer’s job is to deliver packets end to end across the internet.<br /><strong>a packet is a collection data with header</strong>.<br /><img src = "../img/cs144/packet.png" align="right" width="380" height ="100px"/></p><p>network layer packet are called <code>datagram</code>.</p><p><img src="../img/cs144%5CNetwork_link.png" alt="" /></p><h3 id="the-network-layer-is-special"><a class="markdownIt-Anchor" href="#the-network-layer-is-special"></a> The network layer  is “special”</h3><p>we must use the internet Protocol (IP)</p><ul><li>IP makes a best-effort attempt to deliver our datagrams to the other end. <strong>But it make no promise</strong></li><li>IP datagrams can get lost, delivered out of order, and be corrupted. <strong>No guarantees</strong>.</li></ul><h3 id="transport-layer"><a class="markdownIt-Anchor" href="#transport-layer"></a> Transport layer</h3><p>the most common transport layer is <strong>TCP</strong> (transmission control protocol)</p><ul><li>guarantee correct in-order delivery of data</li></ul><p>some applications doesn’t need reliable delivery, it can use <strong>UDP</strong> (user datagram protocol).</p><ul><li>an alternative transport layer that bundles up application data and hands it to the network layer</li><li>it offers no delivery guarantees at all</li></ul><h3 id="application"><a class="markdownIt-Anchor" href="#application"></a> Application</h3><p>they have their own protocol to define the syntax and semantics of data flowing between two end points<br />(e.g. http, bit-torrent)</p><h3 id="others"><a class="markdownIt-Anchor" href="#others"></a> others</h3><img src = "../img/cs144/IP_is_thin.png" width="700px" height="350"/><img src = "../img/cs144/OSI-model.png" width="700px" height="350"/><h2 id="ip-service-model"><a class="markdownIt-Anchor" href="#ip-service-model"></a> IP Service model</h2><table><thead><tr><th>Property</th><th>behavior</th></tr></thead><tbody><tr><td>Datagram</td><td>Individually routed packets.</td></tr><tr><td>Unreliable</td><td>packet might be dropped</td></tr><tr><td>Best effort</td><td>only if necessary</td></tr><tr><td>Connectionless</td><td>No per-flow state.</td></tr></tbody></table><p><strong>IP is &quot;simple&quot;</strong></p><ul><li>faster, lower cost to build and maintain</li><li>The end-to-end principle</li><li>allows a variety of reliable (or unreliable) service to be built on top</li><li>make very few assumptions about link layer</li></ul><p><strong>IP Service Model</strong></p><ol><li>Tried to prevent packets looping forever<br />add a hop count field in the header of every datagram (<code>ttl</code>:time to live), start at a number like 128, decremented by every router passes through, when it reaches 0, IP think it be stuck in a loop then drop it.</li><li>will fragment packets if they are too long.<br />bc most links have a limit on the size of packets.(ethernet – 1500bytes)</li><li>uses a header checksum to reduce chances of delivering datagram to wrong destination.</li><li>allows for new version of IP<ul><li>IPv4     32 bit addresses</li><li>IPv6     128 bit addresses</li></ul></li><li>allows for new options to be added to header</li></ol><img src = "../img/cs144/IPv4-datagram.png"  width="500px" /><h2 id="life-of-a-packet"><a class="markdownIt-Anchor" href="#life-of-a-packet"></a> Life of a Packet</h2><h3 id="three-way-handshake"><a class="markdownIt-Anchor" href="#three-way-handshake"></a> three-way handshake</h3><ol><li><p>Client -----sends a synchronized message(同步信息)-----&gt; Server   (synchronize, <strong>SYN</strong>)</p></li><li><p>Server -----responds with a synchronized message and also acknowledges the client synchronize----&gt; Client   (synchronize and acknowledge, <strong>SYN/ACK</strong>)</p></li><li><p>Client -----responds by acknowledging the server synchronized ----&gt; Server   (acknowledge, <strong>ACK</strong>)</p></li></ol><p>IP addressed:  like computer addresses.<br />TCP port: tells which applications to deliver data to.</p><p>Web Server usually run on tcp port 80.</p><p><img src="../img/cs144/inside-the-stream.png" alt="" /></p>]]></content>
    
    
    
    <tags>
      
      <tag>计网</tag>
      
      <tag>cs144</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
